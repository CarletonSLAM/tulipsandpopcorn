#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include "hw_i2c.h"
#include "hw_ints.h"
#include "hw_memmap.h"
#include "hw_types.h"
#include "hw_gpio.h"
#include "sysctl.h"
#include "gpio.h"
#include "pin_map.h"
#include "rom.h"
#include "uart.h"
#include "fpu.h"
#include "flash.h"
#include "i2c.h"
#include "pwm.h"
#include "malloc.h"
//#include "json/json.h"
#include "utilities.h"
#include "wifiBoard.h"
#include "dcMotor.h"
#include "i2cFunc.h"

extern void TIVA_init(void);
extern void TIVA_wait_miliSeconds(uint32_t ms);

extern void DEBUGCONSOLE_init();
extern void DEBUGCONSOLE_print(const char *pui8Buffer, uint32_t ui32Count);
extern void DEBUGCONSOLE_print_line(const char *pui8Buffer, uint32_t ui32Count);
/*
extern void UART_wait_forResponse(const uint32_t UARTBase);

extern int16_t FLASH_write(const uint32_t pui32Address, const char *pui8Data);
extern int16_t FLASH_read(const uint32_t pui32Address, char* pui8Data);

extern void WIFI_init(void);
extern void WIFI_set_config(void);
extern void WIFI_send_commandBlocking(const AT_CMD *cmd);
extern void WIFI_clear_UARTBuffer(void);

extern void TIMER0_init(void);
*/


extern char wifiUARTBuffer[UART_BUFFER_LENGTH];
extern uint16_t wifiUARTIndex;
extern bool wifiResetComplete;

extern uint8_t motorDuration;
extern bool  motorPowered;


const i2c_port I2C1_PORT = {SYSCTL_PERIPH_I2C1,   //periphComp
                        SYSCTL_PERIPH_GPIOA,  //periphPort
                        I2C1_BASE,             //i2cBase
                        GPIO_PORTA_BASE,      //i2cPortBase
                        GPIO_PA6_I2C1SCL,     //sclPort
                        GPIO_PIN_6,           //sclPin
                        GPIO_PA7_I2C1SDA,     //sdaPort
                        GPIO_PIN_7            //sdaPin
                        };



int16_t EVENT_connect_to_wifi_network();
int16_t EVENT_connect_to_server();
int16_t EVENT_send_to_server();
void EVENT_register_on_server(char* authCode);

void SERVOMOTOR_init();
void SERVOMOTOR_move(uint16_t PWMWidth);

extern void DCMOTOR_init(void);
extern void DCMOTOR_move_forward_seconds(uint16_t seconds);
extern void DCMOTOR_move_reverse_seconds(uint16_t seconds);

typedef struct {
  uint8_t Freq;
  uint32_t LoadReg;

} PWM_CONFIG;



#define PWM_FREQUENCY 46
volatile uint32_t ui32Load;
volatile uint32_t ui32PWMClock;

// 141 = No move
// 141+ = Counter-Clockwise
// 141- = Clockwise
volatile uint16_t PWMAdjust;


const AT_CMD _ATCWLAP = {10,5000, "AT+CWLAP\r\n"};
const AT_CMD _ATCWJAP = {52,10000, "AT+CWJAP=\"IEEE-SLAM-Network\",\"tulipsandpopcorn\"\r\n"};
const AT_CMD _ATCWJAP_CUR = {11,500, "AT+CWJAP?\r\n"};

const AT_CMD _ATPING = {26, 3000, "AT+PING=\"192.168.1.140\"\r\n"};
const AT_CMD _ATCIPSTART = {42,5000, "AT+CIPSTART=4,\"TCP\",\"192.168.1.140\",8000\r\n"};
const AT_CMD _ATCIPSEND = {17,1000,"AT+CIPSEND=4,22\r\n"};
const AT_CMD dataSend = {22,5000,"GET /lkd/ HTTP/1.0\r\n\r\n"};

const uint32_t FLASH_KEY_ADDRESS = 0x0003FFEE;

const uint8_t COMPASS_ADDR = 0x3A;

char auth_code[256];

int main(void) {

  //uint8_t response ;
  char* singCharBuf;

  TIVA_init();
  DEBUGCONSOLE_init();


  singCharBuf = malloc(sizeof(char)); 
  //I2C_setup(&I2C1_PORT);
  

  //Enable and reset I2C 1 channel
  ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C1);
  ROM_SysCtlPeripheralReset(SYSCTL_PERIPH_I2C1);

  //Enable the GPIO A Pheriperal
  ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

  // Set GPIO A6 and A7 as I2C SCL and SDA pins
  ROM_GPIOPinConfigure(GPIO_PA6_I2C1SCL);
  ROM_GPIOPinConfigure(GPIO_PA7_I2C1SDA);

  ROM_GPIOPinTypeI2CSCL(GPIO_PORTA_BASE, GPIO_PIN_6);
  ROM_GPIOPinTypeI2C(GPIO_PORTA_BASE, GPIO_PIN_7);


  //Set the I2C clock bus speed to 100 kbps
  ROM_I2CMasterInitExpClk(I2C1_BASE, ROM_SysCtlClockGet(), false);

  //Clear the FIFO flags
  HWREG(I2C1_BASE + I2C_O_FIFOCTL) = 80008000;



  ROM_I2CMasterSlaveAddrSet(I2C1_PORT.i2cBase, COMPASS_ADDR, false);
  ROM_I2CMasterDataPut(I2C1_PORT.i2cBase, 0x0f);
  ROM_I2CMasterControl(I2C1_PORT.i2cBase,I2C_MASTER_CMD_SINGLE_SEND);
  while(ROM_I2CMasterBusy(I2C1_PORT.i2cBase));

  *singCharBuf = ROM_I2CMasterDataGet(I2C1_PORT.i2cBase);
  ROM_I2CMasterControl(I2C1_PORT.i2cBase,I2C_MASTER_CMD_SINGLE_RECEIVE);
  while(ROM_I2CMasterBusy(I2C1_PORT.i2cBase));

}
